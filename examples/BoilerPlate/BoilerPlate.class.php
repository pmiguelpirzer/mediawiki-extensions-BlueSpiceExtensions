<?php

/**
 * BlueSpice MediaWiki
 * Extension: BoilerPlate
 * Description:
 * Authors:
 *
 * Copyright (C) 2016 Hallo Welt! GmbH, All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * http://www.gnu.org/copyleft/gpl.html
 *
 * For further information visit http://www.bluespice.com
 * @author     Your Name <your.name@yourdomain.tld>
 * @package    BlueSpice_Extensions
 * @subpackage BoilerPlate
 * @copyright  Copyright (C) 2016 Hallo Welt! GmbH, All rights reserved.
 * @license    http://www.gnu.org/copyleft/gpl.html GNU Public License v3
 * @filesource
 */

class BoilerPlate extends BsExtensionMW {

	/**
	 * Contructor of the BoilerPlate class
	 */
	public function __construct() {
		// Base settings
		$this->mExtensionFile = __FILE__;
		// Type of the extension. Used in SpecialVersion
		$this->mExtensionType = EXTTYPE::PARSERHOOK; //SPECIALPAGE/OTHER/VARIABLE/PARSERHOOK
		// Machine readable extension information. Mainly used in Special:Version and ExtensionInfo
		$this->mInfo = array(
			EXTINFO::NAME => 'BoilerPlate',
			EXTINFO::DESCRIPTION => 'bs-boilerplate-desc',
			EXTINFO::AUTHOR => 'YOUR NAME',
			EXTINFO::VERSION => 'default', // 'default' means in sync with BlueSpiceFoundation
			EXTINFO::STATUS => 'default', // 'default' means in sync with BlueSpiceFoundation
			EXTINFO::PACKAGE => 'default', // 'default' means in the free version of BlueSpice
			EXTINFO::URL => 'https://help.bluespice.com/index.php/How_to_become_a_BlueSpice_hacker'
		);
		// Unique key to identify the extension in various places, e.g. cache
		$this->mExtensionKey = 'MW::BoilerPlate';
	}

	/**
	 * Initialization of BoilerPlate extension
	 */
	protected function initExt() {
		// Bind on hook BeforePageDisplay with the method onBeforePageDisplay.
		$this->setHook('BeforePageDisplay');

		// Register system and user preferences.
		BsConfig::registerVar(
			// Name of the preference variable
			'MW::BoilerPlate::Mode',
			// Default value
			1,
			// Flags: user preference, integer, more complex settings, send value
			// to frontend via Javascript.
			BsConfig::LEVEL_USER|BsConfig::TYPE_INT|
			BsConfig::USE_PLUGIN_FOR_PREFS|BsConfig::RENDER_AS_JAVASCRIPT,
			// Label key
			'bs-boilerplate-pref-mode',
			// Type of the settings ui element
			'radio'
		);
	}

	/**
	 * Called by Preferences and UserPreferences
	 * @param string $sAdapterName Name of the adapter. Probably MW.
	 * @param BsConfig $oVariable The variable that is to be specified.
	 * @return array Option array of specifications.
	 */
	public function runPreferencePlugin( $sAdapterName, $oVariable ) {
		//When having more than one variable you may want to dispatch
		//on $oVariable->getName();

		return array(
			'options' => array(
				wfMessage( 'bs-boilerplate-pref-mode-yes' )->text() => 1,
				wfMessage( 'bs-boilerplate-pref-mode-no' )->text() => 0
			),
		);
	}

	/**
	 * Adds resources to ResourceLoader
	 * @param OutputPage $out
	 * @param Skin $skin
	 * @return boolean Always true to keep hook running
	 */
	public function onBeforePageDisplay(&$out, &$skin) {
		//Having a dedicated module for styles and loading it through
		//'addModuleStyles' prevents CSS flickering. It shoult obly be done
		//when styling elements that are available in the source HTML. If you
		//want to style markup that gets generated by JavaScript embed your
		//styling in the same module and use 'addModules'.
		$out->addModuleStyles( 'ext.bluespice.boilerPlate.styles');

		//Adding JavaScript and clientside I18N
		$out->addModules('ext.bluespice.boilerPlate.scripts');

		//Additional context sensitive data for the clientside
		$bVar = date( 'w' ) == 3; //Is it Wednesday?
		$out->addJsConfigVars( 'bsBoilerPlateSomeCalculatedVar', $bVar );

		return true;
	}
}